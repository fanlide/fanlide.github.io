<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>测试 on 慕枫的leaf</title><link>https://mapleafgo.github.io/categories/test/</link><description>Recent content in 测试 on 慕枫的leaf</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 04 Mar 2021 16:06:29 +0800</lastBuildDate><atom:link href="https://mapleafgo.github.io/categories/test/index.xml" rel="self" type="application/rss+xml"/><item><title>Jmeter 用脚本处理器对数据进行处理</title><link>https://mapleafgo.github.io/posts/jmeter/jsr223/</link><pubDate>Thu, 04 Mar 2021 16:06:29 +0800</pubDate><guid>https://mapleafgo.github.io/posts/jmeter/jsr223/</guid><description>&lt;blockquote>
&lt;p>前两天在项目中写 jmeter 测试脚本，项目中唯一 ID 得调用端请求时生成并传送，于是查资料、翻官网文档，终于写出来了。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>示例中我们使用简单的百度翻译的词典 API 请求 json 数据。&lt;/p>
&lt;/blockquote>
&lt;p>说明下，这里为啥要用 groovy 脚本，因为官网说 groovy 脚本会缓存编译结果，可提高性能。而且 groovy 脚本基本跟 Java 没啥区别&lt;/p>
&lt;h3 id="首先先创建个简单的-http-请求">首先先创建个简单的 HTTP 请求&lt;/h3>
&lt;ul>
&lt;li>打开 jmeter 后，先在根节点(Test Plan)下新建个线程组(Thread Group)，默认的线程组配置就够我们本次示例用了&lt;/li>
&lt;li>在线程组下新建个 Http 请求(HTTP Request)，再新建个结果树展示(View Results Tree)&lt;/li>
&lt;li>配置 Http 请求，首先是协议(Protocol): &lt;code>https&lt;/code> ，服务地址(Server Name): &lt;code>fanyi.baidu.com&lt;/code> ，请求类型: &lt;code>POST&lt;/code> ，Path: &lt;code>/sug&lt;/code>&lt;/li>
&lt;li>添加个请求参数(Parameters)，点击&lt;code>Add&lt;/code>，Name: &lt;code>kw&lt;/code>，Value: &lt;code>test&lt;/code>&lt;/li>
&lt;li>点击运行，或者使用快捷键&lt;code>Ctrl+R&lt;/code>，运行结束在结果树中查看结果，看看是否请求成功&lt;/li>
&lt;/ul>
&lt;h3 id="在发起请求前填充数据">在发起请求前，填充数据&lt;/h3>
&lt;blockquote>
&lt;p>首先说说我们要达到的预期，我们要在请求参数中清理掉原本&lt;code>kw&lt;/code>参数的&lt;code>test&lt;/code>值，填充上新的参数值&lt;code>success&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>在写下面的东西前，先附上&lt;a class="link" href="https://jmeter.apache.org/usermanual/component_reference.html#JSR223_PreProcessor" target="_blank" rel="noopener"
>官方文档&lt;/a>，这是 JSR233 前置处理器的文档。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>先在 Http 请求节点下新建个 JSR223 前置处理器(JSR223 PreProcessor)，当然，也可以在同级节点建(不过必须要在请求节点后)，同级建的话，处理器的作用域就是同级节点的所有请求&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选择脚本 &lt;code>groovy&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>编写脚本&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-groovy" data-lang="groovy">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 获取请求参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">def&lt;/span> &lt;span class="n">params&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sampler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getArguments&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 获取第一个参数，这里排序跟请求节点的参数顺序挂钩
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">def&lt;/span> &lt;span class="n">kw&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getArgument&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 赋予kw新值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">kw&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setValue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;success&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>运行测试下请求参数是否已经更改&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>写到这里，我真的忍不住想吐槽下，这请求参数藏的够深的啊 😑 官方文档也没写这点，要不是看 API 文档，还真就不一定发现的了 Arguments。官方文档里 &lt;code>Parameters&lt;/code>、&lt;code>args&lt;/code>、&lt;code>ctx&lt;/code>、&lt;code>props&lt;/code>都试了，活生生让我试出来的啊 😤！！！&lt;/p>
&lt;h3 id="在请求结束后对返回的数据进行格式化处理">在请求结束后，对返回的数据进行格式化处理&lt;/h3>
&lt;blockquote>
&lt;p>返回数据的处理，主要是对返回的数据进行解码、Json 格式的缩进展示&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>后置处理就方便的多了，在 JSR223 后置处理器(JSR223 PostProcessor)中，有&lt;code>prev&lt;/code>参数可直接操作结果集&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>同前置处理器一样，先建个 JSR223 后置处理器节点，作用域同前置处理器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>同样，脚本选择&lt;code>groovy&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>编写脚本&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-groovy" data-lang="groovy">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">groovy.json.JsonOutput&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.apache.commons.lang3.StringEscapeUtils&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 字符串的形式读取返回数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">def&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">prev&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getResponseDataAsString&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 格式化json数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">def&lt;/span> &lt;span class="n">json&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">JsonOutput&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">prettyPrint&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 对数据进行Unicode转中文的解码
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">def&lt;/span> &lt;span class="n">ret&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">StringEscapeUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">unescapeJava&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">json&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 把我们转换后的数据设置为返回结果，编码设置为UTF-8
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">prev&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setResponseData&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ret&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s2">&amp;#34;UTF-8&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>运行测试结果，完美结束！&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>至此整个前置后置的处理就完美了&lt;/p></description></item></channel></rss>