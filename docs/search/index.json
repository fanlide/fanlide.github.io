[{"content":"FastJsonConfig fastJsonConfig = new FastJsonConfig(); fastJsonConfig.setSerializerFeatures(SerializerFeature.DisableCircularReferenceDetect); // 关闭引用检测  fastConverter.setFastJsonConfig(fastJsonConfig); ","date":"2020-04-21T00:00:00Z","permalink":"http://example.org/posts/fastjson/ref/","title":"解决 fastjson 输出 $ref 引用问题"},{"content":" 注册https://issues.sonatype.org/账号 使用 scoop 安装 gpgscoop install gpg 使用 gpg 生成密钥对  gpg --full-generate-key\n到处私钥\ngpg --export-secret-keys -o secring.gpg\n发布到 ubuntu 密钥库\ngpg --keyserver keyserver.ubuntu.com --send-keys ***********\ngpg --full-generate-key gpg (GnuPG) 2.2.20; Copyright (C) 2020 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. 请选择您要使用的密钥类型： (1) RSA 和 RSA （默认） (2) DSA 和 Elgamal (3) DSA（仅用于签名） (4) RSA（仅用于签名） RSA 密钥的长度应在 1024 位与 4096 位之间。 您想要使用的密钥长度？(2048) 请设定这个密钥的有效期限。 0 = 密钥永不过期 \u0026lt;n\u0026gt; = 密钥在 n 天后过期 \u0026lt;n\u0026gt;w = 密钥在 n 周后过期 \u0026lt;n\u0026gt;m = 密钥在 n 月后过期 \u0026lt;n\u0026gt;y = 密钥在 n 年后过期 密钥永远不会过期 这些内容正确吗？ (y/N) y GnuPG 需要构建用户标识以辨认您的密钥。 真实姓名： 电子邮件地址： 注释： 最后重复两次输入Passphase（这个在发布的时候需要，相当于密钥密码） 配置 gradle 文件，这个看官方文档吧  ","date":"2020-03-21T00:00:00Z","permalink":"http://example.org/posts/gradle/maven-publish/","title":"使用Gradle发布到Maven中央仓库"},{"content":"1、安装 sudo apt install -y ibus ibus-gtk ibus-gtk3 ibus-qt4\n2、使用 im-config 切换输入法引擎   \n直接一路确定、yes\n  \n到这一步选择 ibus，再一路确定。就搞定了\n常见问题： 旧版本 im-config 因为存在两个 ibus 配置文件，所以 ibus 读取不到。可到/usr/share/im-config/data/目录下删除 23_ibus 的两个文件。再次启动 im-config 就可以了\n","date":"2019-07-16T00:00:00Z","image":"http://example.org/posts/linux/install_ibus/D736D06C-7B39-4813-A96D-027E2A5F8D2D_hu953bd577f5e4f1bc4673ecb8d410858f_40726_120x120_fill_box_smart1_2.png","permalink":"http://example.org/posts/linux/install_ibus/","title":"Deepin配置使用ibus输入引擎"},{"content":"最终实现效果： 配置 ssl 证书，http 自动跳转 https。所有 https 请求代理到另外的 http 服务上。\n遇到的问题与解决方式： 1、http 自动跳转 https 这里跳转方式，百度就有好多 下面是腾讯给出的方式，也是大多数采用的方式\nserver { listen 80; server_name www.domain.com; #填写绑定证书的域名 rewrite ^(.*)$ https://$host$1 permanent; #把http的域名请求转成https } 这种方式，我感觉不太直观。于是我使用的是下面这种使用 301 重定向的方法\nserver { listen 80; #可以省略，默认就是80 server_name ***; #域名 return 301 https://$server_name; } 2、https 请求代理到 http 服务上 location / { proxy_pass http://xxx; #代理服务地址 proxy_set_header Host $host; #传输服务器地址 proxy_set_header X-Real-IP $remote_addr; #传输请求地址 proxy_set_header X-Forwarded-Proto $scheme; #传递传输协议（主要就是这个指令） } ","date":"2019-06-30T00:00:00Z","image":"http://example.org/posts/nginx/proxy/4DC29ACB-678C-4221-AFF1-728A6AB2C449_hu3115ab95d4286227ea3137d1e3cd6502_4973_120x120_fill_box_smart1_2.png","permalink":"http://example.org/posts/nginx/proxy/","title":"记一次 nginx 代理问题"}]